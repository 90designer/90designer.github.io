<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP获取请求响应头信息(response headers)</title>
    <link href="/2021/11/11/PHP%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AFHttp%20response%20headers/"/>
    <url>/2021/11/11/PHP%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AFHttp%20response%20headers/</url>
    
    <content type="html"><![CDATA[<blockquote><p>The best preparation for tomorrow is doing your best today.</p><p>对明天做好的准备就是今天做到最好！</p></blockquote><h3 id="HTTP-Response-Header属性详解"><a href="#HTTP-Response-Header属性详解" class="headerlink" title="HTTP Response Header属性详解:"></a>HTTP Response Header属性详解:</h3><p>​    Response消息的结构, 和Request消息的结构基本一样。 分为三部分,第一部分叫Response line, 第二部分叫Response header，第三部分是body. header和body之间也有个空行。</p><p>​    推荐阅读：<a href="https://blog.csdn.net/weixin_43453386/article/details/83792682">https://blog.csdn.net/weixin_43453386/article/details/83792682</a></p><h3 id="PHP-Http-Post-请求示例："><a href="#PHP-Http-Post-请求示例：" class="headerlink" title="PHP Http Post 请求示例："></a>PHP Http Post 请求示例：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * post请求并获取response headers</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $url</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $args</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> array $handler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> bool|string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HttpPostAndResHeaders</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>,<span class="hljs-variable">$args</span>, <span class="hljs-variable">$handler</span>=[]</span>)</span>&#123;<br>    <span class="hljs-variable">$ch</span> = curl_init();<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL,<span class="hljs-variable">$url</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_CUSTOMREQUEST,<span class="hljs-string">&quot;POST&quot;</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_USERAGENT,<span class="hljs-string">&quot;Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)&quot;</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-number">1</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_AUTOREFERER, <span class="hljs-number">1</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">1</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="hljs-variable">$args</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$handler</span>))&#123;<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADERFUNCTION, <span class="hljs-variable">$handler</span>); <span class="hljs-comment">// 设置header处理函数</span><br>    &#125;<br>    <span class="hljs-variable">$result</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>    curl_close(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是我自己封装的PHP CURL post请求函数，其中<code>CURLOPT_HEADER</code> 参数置为’true’或者 1 表示可以获取响应的头信息。<code>CURLOPT_HEADERFUNCTION</code> 参数设置了获取响应头信息的回调函数。CUrl 会把每一条 response 的 header 指令传给这个函数，由函数来决定如何执行后面的步骤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">headerHandler</span>(<span class="hljs-params"><span class="hljs-variable">$ch</span>,<span class="hljs-variable">$headerLine</span></span>) </span>&#123;<br>        <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$headerLine</span>);<br>        <span class="hljs-variable">$split</span> = explode(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-variable">$headerLine</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$split</span>) &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable">$key</span> = trim(<span class="hljs-variable">$split</span>[<span class="hljs-number">0</span>]);<br>            <span class="hljs-variable">$value</span> = trim(<span class="hljs-variable">$split</span>[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span> === <span class="hljs-string">&#x27;sign&#x27;</span>)&#123;<br>               <span class="hljs-built_in">self</span>::<span class="hljs-variable">$sign</span> = <span class="hljs-variable">$value</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$len</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这是封装的获取response headers 类当中的处理方法，其实很简单，就是根据response header的格式进行截取，最后获取自定义/想要的头信息。</p><p><code>注意</code>：</p><pre><code>1. $ch 是必需定义的，虽然函数内没有使用。2. return $len也是必须的。</code></pre><p>回调函数要定义 2 个参数，第 1 个是 CUrl 的资源标识符，第 2 个是单独的一条 header 字符串。如果想让 CUrl 继续下载后续内容，那么回调函数应该返回 header 字符串的长度<code>return $len;</code>。 如果不想继续下载，直接返回数字 0，那么 CUrl 就会发送 TCP 的终止连接的指令，不会继续下载后续内容了。</p><p>大家看到上面的http post方法HttpPostAndResHeaders(…) 需要一个$handler的参数，默认是数组（这是我自定义的，其实可以是其他类型，后面会提到）。</p><p>那么$handler参数值就是curl请求完成后回调的方式。</p><h6 id="CURL回调方式"><a href="#CURL回调方式" class="headerlink" title="CURL回调方式"></a>CURL回调方式</h6><ol><li><p>直接方法调用函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$result</span> = HttpPostAndResHeaders(<span class="hljs-string">&#x27;地址&#x27;</span>,’参数‘, <span class="hljs-string">&#x27;headerHandler&#x27;</span>);<br></code></pre></td></tr></table></figure><p>这种方式就需要我们去定义一个headerHandler()函数，不能使用以上的headerHandler类方法，获取到的头信息赋值到全局变量或者其他方式。</p></li><li><p>静态函数调用</p><p>需要将类方法设定为static，及上面示例中的headerHandler()方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$result</span> = HttpPostAndResHeaders(<span class="hljs-string">&#x27;地址&#x27;</span>,’参数‘, [<span class="hljs-string">&#x27;self&#x27;</span>, <span class="hljs-string">&#x27;headerHandler&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>这种方式是目前我自己在使用的。当然此处的<code>self</code>你也可以换成”类名”调用试试。</p></li><li><p>非本类内的静态调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$result</span> = HttpPostAndResHeaders(<span class="hljs-string">&#x27;地址&#x27;</span>,’参数‘, [<span class="hljs-string">&#x27;app\controller\Order&#x27;</span>, <span class="hljs-string">&#x27;headerHandler&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>通过命名空间的方式调用。</p></li><li><p>对象调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-variable">$result</span> = HttpPostAndResHeaders(<span class="hljs-string">&#x27;地址&#x27;</span>,’参数‘, [<span class="hljs-variable">$OBJECT</span>, <span class="hljs-string">&#x27;headerHandler&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>此方式没有测试，因为上面几种用起来比较顺手。 扩展：把$OBJECT替换为$this试试有什么结果？</p></li></ol><p>其实核心概念就是阅读和理解CURL 手册：<a href="https://www.php.net/manual/zh/book.curl.php">https://www.php.net/manual/zh/book.curl.php</a>  感受一下PHP的强大，哈哈哈。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php headers</tag>
      
      <tag>自定义header</tag>
      
      <tag>response header</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java与PHP RSA加密（RSA、ECB、PKCS1Padding）互通</title>
    <link href="/2020/12/22/Java%E4%B8%8EPHP%20RSA%E5%8A%A0%E5%AF%86%EF%BC%88RSA%E3%80%81ECB%E3%80%81PKCS1Padding%EF%BC%89%E4%BA%92%E9%80%9A/"/>
    <url>/2020/12/22/Java%E4%B8%8EPHP%20RSA%E5%8A%A0%E5%AF%86%EF%BC%88RSA%E3%80%81ECB%E3%80%81PKCS1Padding%EF%BC%89%E4%BA%92%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Face life with a smile , always don’t complain . Leisurely , the heart , with you .</p><p>笑着面对生活，始终不抱怨 。悠然，随心，随性，随缘 。</p></blockquote><h3 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h3><p>  在一次项目开发中，甲方要求Api的加密方式必须提供: Java、Python、Golang、PHP的加密DEMO。加密方式使用RSA加密。</p><h3 id="Api服务加密代码"><a href="#Api服务加密代码" class="headerlink" title="Api服务加密代码"></a>Api服务加密代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RSAPublicKey <span class="hljs-title">loadPublicKey</span><span class="hljs-params">(String modulus, String exponent, <span class="hljs-keyword">int</span> radix)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       BigInteger mod = <span class="hljs-keyword">new</span> BigInteger(modulus, radix);<br>       BigInteger exp = <span class="hljs-keyword">new</span> BigInteger(exponent, radix);<br>       RSAPublicKeySpec pubKeySpec = <span class="hljs-keyword">new</span> RSAPublicKeySpec(mod, exp);<br>       KeyFactory keyFac = KeyFactory.getInstance(RSA_KEY_TYPE);<br>       <span class="hljs-keyword">return</span> (RSAPublicKey)keyFac.generatePublic(pubKeySpec);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] publicKeyEncrypt(String algor, String mode, String padding, RSAPublicKey rsaPublicKey, <span class="hljs-keyword">byte</span>[] plainText) <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-keyword">if</span> (algor == <span class="hljs-keyword">null</span> || algor.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>           algor = <span class="hljs-string">&quot;RSA&quot;</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">if</span> (mode == <span class="hljs-keyword">null</span> || mode.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>           mode = <span class="hljs-string">&quot;ECB&quot;</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">if</span> (padding == <span class="hljs-keyword">null</span> || padding.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>           padding = <span class="hljs-string">&quot;PKCS1Padding&quot;</span>;<br>       &#125;<br><br>       String cipherAlgor = algor + <span class="hljs-string">&quot;/&quot;</span> + mode + <span class="hljs-string">&quot;/&quot;</span> + padding;<br>       Cipher cipher = Cipher.getInstance(cipherAlgor);<br>       cipher.init(<span class="hljs-number">1</span>, rsaPublicKey);<br>       <span class="hljs-keyword">byte</span>[] cipherText = cipher.doFinal(plainText);<br>       <span class="hljs-keyword">return</span> cipherText;<br>   &#125;<br></code></pre></td></tr></table></figure><p>名词解析：</p><p>​     <span class="label label-primary"> modulus</span>  系数（模数）</p><p>​     <span class="label label-primary"> exponent</span>  公共指数</p><p>​     <span class="label label-primary"> RSA是算法，ECB是分块模式，PKCS1Padding是填充模式整个构成一个完整的加密算法。</span> </p><p>推荐阅读：</p><p>​    <a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA算法原理一</a></p><p>​    <a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html">RSA算法原理二</a></p><p>代码解析：</p><p>​    首先loadPublicKey()会根据模数和公共指数产生一个公钥,  publicKeyEncrypt()再根据公钥进行加密处理。</p><h3 id="PHP-实现通过模数、公共指数RSA加密"><a href="#PHP-实现通过模数、公共指数RSA加密" class="headerlink" title="PHP 实现通过模数、公共指数RSA加密"></a>PHP 实现通过模数、公共指数RSA加密</h3><ol><li><p>通过下载安装PHP安全通信库PHPSeclib</p><p>下载安装方式很简单，可以看我的另一篇文章 <a href="/2020/12/22/ThinkPHP%E5%BC%95%E5%85%A5phpseclib%E5%AE%9E%E7%8E%B0rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E6%96%B9%E5%BC%8F/">ThinkPHP引入phpseclib实现rsa加密的方式</a></p></li><li><p>上代码展示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RsaEntrypt</span>(<span class="hljs-params"><span class="hljs-variable">$sha1Str</span>,<span class="hljs-variable">$modulus</span>, <span class="hljs-variable">$exponent</span></span>)</span>&#123;<br>    <span class="hljs-variable">$modulus</span> = <span class="hljs-keyword">new</span> \Math_BigInteger(<span class="hljs-variable">$modulus</span>, <span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$exponent</span> = <span class="hljs-keyword">new</span> \Math_BigInteger(<span class="hljs-variable">$exponent</span>, <span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$rsa</span> = <span class="hljs-keyword">new</span> \Crypt_RSA();<br>    <span class="hljs-variable">$rsa</span>-&gt;modulus = <span class="hljs-variable">$modulus</span>;<br>    <span class="hljs-variable">$rsa</span>-&gt;exponent = <span class="hljs-variable">$exponent</span>;<br>    <span class="hljs-variable">$rsa</span>-&gt;publicExponent = <span class="hljs-variable">$exponent</span>;<br>    <span class="hljs-variable">$rsa</span>-&gt;k = strlen(<span class="hljs-variable">$rsa</span>-&gt;modulus-&gt;toBytes());<br>    <span class="hljs-variable">$pubk</span> = <span class="hljs-variable">$rsa</span>-&gt;getPublicKey(CRYPT_RSA_PRIVATE_FORMAT_PKCS8);<br>    extension_loaded(<span class="hljs-string">&#x27;openssl&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php需要openssl扩展支持&#x27;</span>);<br>    <span class="hljs-variable">$publicKey</span> =openssl_pkey_get_public(<span class="hljs-variable">$pubk</span>); <span class="hljs-comment">//判断公钥是否是可用的</span><br>    (<span class="hljs-variable">$publicKey</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;公钥不可用&#x27;</span>);<br><br>    <span class="hljs-comment">//把需要加密的内容，按128位拆开解密</span><br>    <span class="hljs-variable">$result</span>  = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$sha1Str</span>)/<span class="hljs-number">128</span>; <span class="hljs-variable">$i</span>++  ) &#123;<br>        <span class="hljs-variable">$data</span> = substr(<span class="hljs-variable">$sha1Str</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">128</span>, <span class="hljs-number">128</span>);<br>        openssl_public_encrypt (<span class="hljs-variable">$data</span>, <span class="hljs-variable">$encrypt</span>, <span class="hljs-variable">$publicKey</span>);<br>        <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$encrypt</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>  bin2hex(<span class="hljs-variable">$result</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码解释：</p><p>​    php端RSA加密主要分为两大部分：</p><ol><li><p>根据模数、公共指数获取RSA公钥</p> <span class="label label-primary"> $modulus</span> 和 <span class="label label-primary"> $exponent</span> 都要转为16进制。 <span class="label label-primary"> getPublicKey()</span> 获取公钥。</li><li><p>加密时按照128位拆开加密（ <span class="label label-primary">不要问为什么 不是117，如果一定要问？好吧往下看</span> ），最终拼接为一个加密串。</p></li></ol></li></ol><pre><code>  ### 扩展知识：  #### 一、 用RSA加解密算法通常有两种不同的方式：   1. 使用对称密钥（比如AES/DES等加解密方法）加密数据，然后使用非对称密钥（RSA加解密密钥）加密对称密钥；      &gt; 安全性高，复杂度也高，不存在加密数据长度限制问题   2. 接使用非对称密钥加密数据；      &gt;安全性差一些，复杂度低，但是存在加密数据限制问题（即使用非对称密钥加密数据时，一次加密的数据长度是（密钥长度／8-11））  #### 二、为什么一次加密的数据长度为 （密钥长度／8-11） ？  RSA 1024实际可加密的明文长度最大也是1024bits， 如果小于这个长度怎么办？就需要进行padding，因为如果没有padding，用户无法确分解密后内容的真实长度，字符串之类的内容问题还不大，以0作为结束符，但对二进制数据就很难理解，因为不确定后面的0是内容还是内容结束符。     只要用到padding，那么就要占用实际的明文长度，于是才有117字节的说法。我们一般使用的padding标准有NoPPadding、OAEPPadding、PKCS1Padding等，其中PKCS#1建议的padding就占用了11个字节。  ​    128字节（1024bits）-减去11字节正好是117字节，但对于RSA加密来讲，padding也是参与加密的。</code></pre>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpseclib</tag>
      
      <tag>PHP rsa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP引入phpseclib实现rsa加密的方式</title>
    <link href="/2020/12/22/ThinkPHP%E5%BC%95%E5%85%A5phpseclib%E5%AE%9E%E7%8E%B0rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/12/22/ThinkPHP%E5%BC%95%E5%85%A5phpseclib%E5%AE%9E%E7%8E%B0rsa%E5%8A%A0%E5%AF%86%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Heaven never helps the man who will not act .</p><p>自己不动，叫天何用 。</p></blockquote><h3 id="PHPSeclib简介"><a href="#PHPSeclib简介" class="headerlink" title="PHPSeclib简介:"></a>PHPSeclib简介:</h3><p>​    phpseclib - PHP安全通信库，纯PHP实现的支持 SSH-2, SFTP, X.509,任意精度整数算术库, Ed25519 / Ed449 / Curve25519 / Curve449, ECDSA / ECDH (支持66条曲线), RSA (PKCS#1 v2.2 compliant), DSA / DH, DES / 3DES / RC4 / Rijndael / AES / Blowfish / Twofish / Salsa20 / ChaCha20, GCM / Poly1305。</p><p>github地址： <a href="https://github.com/phpseclib/phpseclib">github地址https://github.com/phpseclib/phpseclib</a></p><p>官方地址：<a href="https://phpseclib.com/">官方地址https://phpseclib.com/</a> （这个文档比较详细，推荐）</p><h3 id="RSA加密流程："><a href="#RSA加密流程：" class="headerlink" title="RSA加密流程："></a>RSA加密流程：</h3><ol><li>  A端生成RSA私钥/公钥，将公钥发送给B端。</li><li>  B端生成aesKey并用RSA公钥加密aesKey。</li><li>  B端将加密后的aesKey发送给A端。</li><li>  A端解密获得aesKey。</li><li>  A发送aes加密业务数据到B端</li><li>  B解密aes获得业务数据</li><li>   重复5，6</li></ol><h3 id="安装PHPSeclib："><a href="#安装PHPSeclib：" class="headerlink" title="安装PHPSeclib："></a>安装PHPSeclib：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">composer require phpseclib/phpseclib:~1.0.19<br></code></pre></td></tr></table></figure><p>文档编写时使用的是v1.0.19版本。</p><h4 id="ThinkPHP3-X版本的使用"><a href="#ThinkPHP3-X版本的使用" class="headerlink" title="ThinkPHP3.X版本的使用"></a>ThinkPHP3.X版本的使用</h4><p>composer安装成功之后，会在Tp项目的根目录生成一个<span class="label label-primary">vendor</span>的文件夹，因为Tp3默认不会加载vendor目录中的类文件，所以在Tp的引导文件(index.php / admin.php / xxx.php)中加入如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./vendor/autoload.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p>注意此行代码必须在<span class="label label-primary"> require ./ThinkPHP/ThinkPHP.php;</span> 加载Tp框架的代码之前。</p><h3 id="封装使用："><a href="#封装使用：" class="headerlink" title="封装使用："></a>封装使用：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">common</span>;<br> <br><span class="hljs-keyword">use</span> <span class="hljs-title">phpseclib</span>\<span class="hljs-title">Crypt</span>\<span class="hljs-title">RSA</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">phpseclib</span>\<span class="hljs-title">Crypt</span>\<span class="hljs-title">AES</span>;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthTools</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/** 生成rsa密钥对</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array privatekey,publickey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rsaCreateKey</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$rsa</span> = <span class="hljs-keyword">new</span> RSA();<br>        <span class="hljs-variable">$key</span> = <span class="hljs-variable">$rsa</span>-&gt;createKey();<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$key</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/** sa加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $string</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rsaEncrypt</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$rsa</span> = <span class="hljs-keyword">new</span> RSA();<br>        <span class="hljs-variable">$rsa</span>-&gt;loadKey(<span class="hljs-variable">$key</span>);<br>        <span class="hljs-variable">$rsa</span>-&gt;setEncryptionMode(RSA::ENCRYPTION_NONE);    <span class="hljs-comment">//选择加密的模式</span><br>        <span class="hljs-keyword">return</span> base64_encode(<span class="hljs-variable">$rsa</span>-&gt;encrypt(<span class="hljs-variable">$string</span>));    <span class="hljs-comment">//需要对结果进行base64转码</span><br>    &#125;<br> <br>    <span class="hljs-comment">/** rsa解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $encryptStr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rsaDecrypt</span>(<span class="hljs-params"><span class="hljs-variable">$encryptStr</span>, <span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$rsa</span> = <span class="hljs-keyword">new</span> RSA();<br>        <span class="hljs-variable">$rsa</span>-&gt;loadKey(<span class="hljs-variable">$key</span>);<br>        <span class="hljs-variable">$rsa</span>-&gt;setEncryptionMode(RSA::ENCRYPTION_NONE);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$rsa</span>-&gt;decrypt(base64_decode(<span class="hljs-variable">$encryptStr</span>));<br>    &#125;<br> <br>    <span class="hljs-comment">/** 随机字符串作为aes key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int $len</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aesCreateKey</span>(<span class="hljs-params"><span class="hljs-variable">$len</span> = <span class="hljs-number">16</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> \phpseclib\Crypt\Random::string(<span class="hljs-variable">$len</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/** aes加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $string</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $aesKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aesEncrypt</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$aesKey</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$aes</span> = <span class="hljs-keyword">new</span> AES();<br>        <span class="hljs-variable">$aes</span>-&gt;setKey(<span class="hljs-variable">$aesKey</span>);<br>        <span class="hljs-keyword">return</span> base64_encode(<span class="hljs-variable">$aes</span>-&gt;encrypt(<span class="hljs-variable">$string</span>));<br>    &#125;<br> <br>    <span class="hljs-comment">/** aes解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $encryptStr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $aesKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aesDecrypt</span>(<span class="hljs-params"><span class="hljs-variable">$encryptStr</span>, <span class="hljs-variable">$aesKey</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$aes</span> = <span class="hljs-keyword">new</span> AES();<br>        <span class="hljs-variable">$aes</span>-&gt;setKey(<span class="hljs-variable">$aesKey</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$aes</span>-&gt;decrypt(base64_decode(<span class="hljs-variable">$encryptStr</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thinkphp rsa</tag>
      
      <tag>phpseclib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 获取图片base64编码格式数据</title>
    <link href="/2020/12/22/PHP-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87base64%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/12/22/PHP-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87base64%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>There are three kinds of time: the future is late, and now it is flying like an arrow. The past will never stand still.</p><p>时间的步伐有三种：未来姗姗来迟，现在像箭一般飞逝，过去永远静立不动。</p></blockquote><h3 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$image_file</span>                = <span class="hljs-string">&#x27;./img.jpg&#x27;</span>;<br><span class="hljs-variable">$image_info</span>             = getimagesize(<span class="hljs-variable">$image_file</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$image_file</span>                = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]<br></code></pre></td></tr></table></figure><p>图片获取的方式有好多种.</p><h3 id="获取图片base64"><a href="#获取图片base64" class="headerlink" title="获取图片base64"></a>获取图片base64</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$base64_image_content</span>   = <span class="hljs-string">&quot;data:<span class="hljs-subst">&#123;$image_info[&#x27;mime&#x27;]&#125;</span>;base64,&quot;</span> . chunk_split(base64_encode(file_get_contents(<span class="hljs-variable">$image_file</span>)));<br></code></pre></td></tr></table></figure><p>chunk_split 可以忽略。</p><span class="label label-primary">$image_info[mime]</span>获取图片的类型 如： image/png 。当然也可以使用$_FILES，pathinfo($imgurl,PATHINFO_EXTENSION) ，exif_imagetype等等方式获取获取。]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>base64</tag>
      
      <tag>php base64</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang标准库深入 - 堆（container/heap）</title>
    <link href="/2020/12/11/Golang%E6%A0%87%E5%87%86%E5%BA%93%E6%B7%B1%E5%85%A5-%E5%A0%86%EF%BC%88container-heap%EF%BC%89/"/>
    <url>/2020/12/11/Golang%E6%A0%87%E5%87%86%E5%BA%93%E6%B7%B1%E5%85%A5-%E5%A0%86%EF%BC%88container-heap%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>There are three kinds of time: the future is late, and now it is flying like an arrow. The past will never stand still.</p><p>时间的步伐有三种：未来姗姗来迟，现在像箭一般飞逝，过去永远静立不动。</p></blockquote><h1 id="什么是interface"><a href="#什么是interface" class="headerlink" title="什么是interface"></a><strong>什么是interface</strong></h1><p>  在面向对象编程中，可以这么说：“接口定义了对象的行为”， 那么具体的实现行为就取决于对象了。</p><p>  在Go中，<strong>接口是一组方法签名</strong>。当一个类型为接口中的所有方法提供定义时，它被称为实现该接口。它与oop非常相似。接口指定类型应具有的方法，类型决定如何实现这些方法。</p><h1 id="创建和实现interface"><a href="#创建和实现interface" class="headerlink" title="创建和实现interface"></a><strong>创建和实现interface</strong></h1><p>在Golang中只要实现了接口定义的方法，就是（JAVA implement）实现了该interface </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">//定义interface </span><br><span class="hljs-keyword">type</span> VowelsFinder <span class="hljs-keyword">interface</span> &#123;  <br>    FindVowels() []<span class="hljs-keyword">rune</span><br>&#125;<br><br><span class="hljs-keyword">type</span> MyString <span class="hljs-keyword">string</span><br><br><span class="hljs-comment">//实现接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ms MyString)</span> <span class="hljs-title">FindVowels</span><span class="hljs-params">()</span> []<span class="hljs-title">rune</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> vowels []<span class="hljs-keyword">rune</span><br>    <span class="hljs-keyword">for</span> _, <span class="hljs-keyword">rune</span> := <span class="hljs-keyword">range</span> ms &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;a&#x27;</span> || <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;e&#x27;</span> || <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;i&#x27;</span> || <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;o&#x27;</span> || <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;u&#x27;</span> &#123;<br>            vowels = <span class="hljs-built_in">append</span>(vowels, <span class="hljs-keyword">rune</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> vowels<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    name := MyString(<span class="hljs-string">&quot;Sam Anderson&quot;</span>) <span class="hljs-comment">// 类型转换</span><br>    <span class="hljs-keyword">var</span> v VowelsFinder <span class="hljs-comment">// 定义一个接口类型的变量</span><br>    v = name <br>    fmt.Printf(<span class="hljs-string">&quot;Vowels are %c&quot;</span>, v.FindVowels())<br><br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>接口的实际用途</strong></p><p>为什么说是实际用途呢？ 如果我们我上面code中的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;Vowels are %c&quot;</span>, v.FindVowels())<br></code></pre></td></tr></table></figure><p>替换为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;Vowels are %c&quot;</span>, name.FindVowels())<br></code></pre></td></tr></table></figure><p>程序同样的输出，而没有使用我们定义的接口。（v变量删除定义）</p><p>下面我们通过案例解释：</p><p>  假设某公司有两个员工，一个普通员工和一个高级员工， 但是基本薪资是相同的，高级员工多拿奖金。计算公司为员工的总开支。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// 薪资计算器接口</span><br><span class="hljs-keyword">type</span> SalaryCalculator <span class="hljs-keyword">interface</span> &#123;<br>CalculateSalary() <span class="hljs-keyword">int</span><br>&#125;<br><span class="hljs-comment">// 普通挖掘机员工</span><br><span class="hljs-keyword">type</span> Contract <span class="hljs-keyword">struct</span> &#123;<br>empId  <span class="hljs-keyword">int</span><br>basicpay <span class="hljs-keyword">int</span><br>&#125;<br><span class="hljs-comment">// 有蓝翔技校证的员工</span><br><span class="hljs-keyword">type</span> Permanent <span class="hljs-keyword">struct</span> &#123;<br>empId  <span class="hljs-keyword">int</span><br>basicpay <span class="hljs-keyword">int</span><br>jj <span class="hljs-keyword">int</span> <span class="hljs-comment">// 奖金</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Permanent)</span> <span class="hljs-title">CalculateSalary</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> p.basicpay + p.jj<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Contract)</span> <span class="hljs-title">CalculateSalary</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> c.basicpay<br>&#125;<br><span class="hljs-comment">// 总开支</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">totalExpense</span><span class="hljs-params">(s []SalaryCalculator)</span></span> &#123;<br>expense := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br>expense = expense + v.CalculateSalary()<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;总开支 $%d&quot;</span>, expense)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>pemp1 := Permanent&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">10000</span>&#125;<br>pemp2 := Permanent&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">20000</span>&#125;<br>cemp1 := Contract&#123;<span class="hljs-number">3</span>, <span class="hljs-number">3000</span>&#125;<br>employees := []SalaryCalculator&#123;pemp1, pemp2, cemp1&#125;<br>totalExpense(employees)<br>&#125;<br></code></pre></td></tr></table></figure><p>体验一下使用接口的美感吧！</p><h1 id="接口的内部表现"><a href="#接口的内部表现" class="headerlink" title="接口的内部表现"></a><strong>接口的内部表现</strong></h1><p>一个接口可以被认为是由一个元组（类型，值）在内部表示的。type是接口的基础具体类型，value是具体类型的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Test <span class="hljs-keyword">interface</span> &#123;<br>Tester()<br>&#125;<br><br><span class="hljs-keyword">type</span> MyFloat <span class="hljs-keyword">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m MyFloat)</span> <span class="hljs-title">Tester</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(t Test)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Interface 类型 %T ,  值： %v\n&quot;</span>, t, t)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> t Test<br>f := MyFloat(<span class="hljs-number">89.7</span>)<br>t = f<br>describe(t)<br>t.Tester()<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>Interface 类型 main.MyFloat ,  值： 89.7<br>89.7</p><h1 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a><strong>空接口</strong></h1><p>具有0个方法的接口称为空接口。它表示为interface {}。由于空接口有0个方法，所有类型都实现了空接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Type = %T, value = %v\n&quot;</span>, i, i)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>     <span class="hljs-comment">// 任何类型的变量传入都可以</span><br><br>s := <span class="hljs-string">&quot;Hello World&quot;</span><br>i := <span class="hljs-number">55</span><br>strt := <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>&#125;&#123;<br>name: <span class="hljs-string">&quot;Naveen R&quot;</span>,<br>&#125;<br>describe(s)<br>describe(i)<br>describe(strt)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a><strong>类型断言</strong></h1><p>类型断言用于提取接口的基础值，语法：<strong>i.(T)</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">assert</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span>&#123;<br>    s:= i.(<span class="hljs-keyword">int</span>)<br>    fmt.Println(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">var</span> s <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-number">55</span><br>  assert(s)<br>&#125;<br></code></pre></td></tr></table></figure><p>程序打印的是int值， 但是如果我们给s 变量赋值的是string类型，程序就会panic。</p><p>所以可以将以上程序改写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">assert</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    v, ok := i.(<span class="hljs-keyword">int</span>)<br>    fmt.Println(v, ok)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> s <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-number">56</span><br>    assert(s)<br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-string">&quot;Steven Paul&quot;</span><br>    assert(i)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 i 的值是int类型， 那么v就是i 对应的值， ok就是true。否则ok为false，程序并不会panic。</p><h1 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a><strong>类型判断</strong></h1><p>类型判断的语法类似于类型断言。在类型断言的语法i.（type）中，类型type应该由类型转换的<strong>关键字</strong>type替换。让我们看看它如何在下面的程序中起作用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findType</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    <span class="hljs-keyword">switch</span> i.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">string</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;String: %s\n&quot;</span>, i.(<span class="hljs-keyword">string</span>))<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">int</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;Int: %d\n&quot;</span>, i.(<span class="hljs-keyword">int</span>))<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;Unknown type\n&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    findType(<span class="hljs-string">&quot;Naveen&quot;</span>)<br>    findType(<span class="hljs-number">77</span>)<br>    findType(<span class="hljs-number">89.98</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以将类型与接口进行比较。如果我们有一个类型并且该类型实现了一个接口，那么可以将它与它实现的接口进行比较。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Describer <span class="hljs-keyword">interface</span> &#123;  <br>    Describe()<br>&#125;<br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;  <br>    name <span class="hljs-keyword">string</span><br>    age  <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span> <span class="hljs-title">Describe</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Printf(<span class="hljs-string">&quot;%s is %d years old&quot;</span>, p.name, p.age)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findType</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    <span class="hljs-keyword">switch</span> v := i.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> Describer:<br>        v.Describe()<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;unknown type\n&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    findType(<span class="hljs-string">&quot;Naveen&quot;</span>)<br>    p := Person&#123;<br>        name: <span class="hljs-string">&quot;Naveen R&quot;</span>,<br>        age:  <span class="hljs-number">25</span>,<br>    &#125;<br>    findType(p)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">unknown</span> <span class="hljs-keyword">type</span>  <br>Naveen R <span class="hljs-keyword">is</span> <span class="hljs-number">25</span> years <span class="hljs-built_in">old</span>  <br></code></pre></td></tr></table></figure><p>最后，留一个小问题，猜想一下，下面程序的输出结果：  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Describer <span class="hljs-keyword">interface</span> &#123;  <br>    Describe()<br>&#125;<br><span class="hljs-keyword">type</span> St <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s St)</span> <span class="hljs-title">Describe</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;被调用le!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findType</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    <span class="hljs-keyword">switch</span> v := i.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> Describer:<br>        v.Describe()<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">string</span>:<br>        fmt.Println(<span class="hljs-string">&quot;String 变量&quot;</span>)<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;unknown type\n&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    findType(<span class="hljs-string">&quot;Naveen&quot;</span>)<br>    st := St(<span class="hljs-string">&quot;我的字符串&quot;</span>)<br>    findType(st)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>堆</tag>
      
      <tag>golang标准库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
