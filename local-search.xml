<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP 获取图片base64编码格式数据</title>
    <link href="/2020/12/22/PHP-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87base64%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/12/22/PHP-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87base64%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>There are three kinds of time: the future is late, and now it is flying like an arrow. The past will never stand still.</p><p>时间的步伐有三种：未来姗姗来迟，现在像箭一般飞逝，过去永远静立不动。</p></blockquote><h3 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$image_file</span>                = <span class="hljs-string">&#x27;./img.jpg&#x27;</span>;<br><span class="hljs-variable">$image_info</span>             = getimagesize(<span class="hljs-variable">$image_file</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$image_file</span>                = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]<br></code></pre></td></tr></table></figure><p>图片获取的方式有好多种.</p><h3 id="获取图片base64"><a href="#获取图片base64" class="headerlink" title="获取图片base64"></a>获取图片base64</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$base64_image_content</span>   = <span class="hljs-string">&quot;data:<span class="hljs-subst">&#123;$image_info[&#x27;mime&#x27;]&#125;</span>;base64,&quot;</span> . chunk_split(base64_encode(file_get_contents(<span class="hljs-variable">$image_file</span>)));<br></code></pre></td></tr></table></figure><p>chunk_split 可以忽略。</p><span class="label label-primary">$image_info[mime]</span>获取图片的类型 如： image/png 。当然也可以使用$_FILES，pathinfo($imgurl,PATHINFO_EXTENSION) ，exif_imagetype等等方式获取获取。]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>base64</tag>
      
      <tag>php base64</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang标准库深入 - 堆（container/heap）</title>
    <link href="/2020/12/11/Golang%E6%A0%87%E5%87%86%E5%BA%93%E6%B7%B1%E5%85%A5-%E5%A0%86%EF%BC%88container-heap%EF%BC%89/"/>
    <url>/2020/12/11/Golang%E6%A0%87%E5%87%86%E5%BA%93%E6%B7%B1%E5%85%A5-%E5%A0%86%EF%BC%88container-heap%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>There are three kinds of time: the future is late, and now it is flying like an arrow. The past will never stand still.</p><p>时间的步伐有三种：未来姗姗来迟，现在像箭一般飞逝，过去永远静立不动。</p></blockquote><h1 id="什么是interface"><a href="#什么是interface" class="headerlink" title="什么是interface"></a><strong>什么是interface</strong></h1><p>  在面向对象编程中，可以这么说：“接口定义了对象的行为”， 那么具体的实现行为就取决于对象了。</p><p>  在Go中，<strong>接口是一组方法签名</strong>。当一个类型为接口中的所有方法提供定义时，它被称为实现该接口。它与oop非常相似。接口指定类型应具有的方法，类型决定如何实现这些方法。</p><h1 id="创建和实现interface"><a href="#创建和实现interface" class="headerlink" title="创建和实现interface"></a><strong>创建和实现interface</strong></h1><p>在Golang中只要实现了接口定义的方法，就是（JAVA implement）实现了该interface </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">//定义interface </span><br><span class="hljs-keyword">type</span> VowelsFinder <span class="hljs-keyword">interface</span> &#123;  <br>    FindVowels() []<span class="hljs-keyword">rune</span><br>&#125;<br><br><span class="hljs-keyword">type</span> MyString <span class="hljs-keyword">string</span><br><br><span class="hljs-comment">//实现接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ms MyString)</span> <span class="hljs-title">FindVowels</span><span class="hljs-params">()</span> []<span class="hljs-title">rune</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> vowels []<span class="hljs-keyword">rune</span><br>    <span class="hljs-keyword">for</span> _, <span class="hljs-keyword">rune</span> := <span class="hljs-keyword">range</span> ms &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;a&#x27;</span> || <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;e&#x27;</span> || <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;i&#x27;</span> || <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;o&#x27;</span> || <span class="hljs-keyword">rune</span> == <span class="hljs-string">&#x27;u&#x27;</span> &#123;<br>            vowels = <span class="hljs-built_in">append</span>(vowels, <span class="hljs-keyword">rune</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> vowels<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    name := MyString(<span class="hljs-string">&quot;Sam Anderson&quot;</span>) <span class="hljs-comment">// 类型转换</span><br>    <span class="hljs-keyword">var</span> v VowelsFinder <span class="hljs-comment">// 定义一个接口类型的变量</span><br>    v = name <br>    fmt.Printf(<span class="hljs-string">&quot;Vowels are %c&quot;</span>, v.FindVowels())<br><br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>接口的实际用途</strong></p><p>为什么说是实际用途呢？ 如果我们我上面code中的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;Vowels are %c&quot;</span>, v.FindVowels())<br></code></pre></td></tr></table></figure><p>替换为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;Vowels are %c&quot;</span>, name.FindVowels())<br></code></pre></td></tr></table></figure><p>程序同样的输出，而没有使用我们定义的接口。（v变量删除定义）</p><p>下面我们通过案例解释：</p><p>  假设某公司有两个员工，一个普通员工和一个高级员工， 但是基本薪资是相同的，高级员工多拿奖金。计算公司为员工的总开支。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// 薪资计算器接口</span><br><span class="hljs-keyword">type</span> SalaryCalculator <span class="hljs-keyword">interface</span> &#123;<br>CalculateSalary() <span class="hljs-keyword">int</span><br>&#125;<br><span class="hljs-comment">// 普通挖掘机员工</span><br><span class="hljs-keyword">type</span> Contract <span class="hljs-keyword">struct</span> &#123;<br>empId  <span class="hljs-keyword">int</span><br>basicpay <span class="hljs-keyword">int</span><br>&#125;<br><span class="hljs-comment">// 有蓝翔技校证的员工</span><br><span class="hljs-keyword">type</span> Permanent <span class="hljs-keyword">struct</span> &#123;<br>empId  <span class="hljs-keyword">int</span><br>basicpay <span class="hljs-keyword">int</span><br>jj <span class="hljs-keyword">int</span> <span class="hljs-comment">// 奖金</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Permanent)</span> <span class="hljs-title">CalculateSalary</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> p.basicpay + p.jj<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Contract)</span> <span class="hljs-title">CalculateSalary</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> c.basicpay<br>&#125;<br><span class="hljs-comment">// 总开支</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">totalExpense</span><span class="hljs-params">(s []SalaryCalculator)</span></span> &#123;<br>expense := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br>expense = expense + v.CalculateSalary()<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;总开支 $%d&quot;</span>, expense)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>pemp1 := Permanent&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">10000</span>&#125;<br>pemp2 := Permanent&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">20000</span>&#125;<br>cemp1 := Contract&#123;<span class="hljs-number">3</span>, <span class="hljs-number">3000</span>&#125;<br>employees := []SalaryCalculator&#123;pemp1, pemp2, cemp1&#125;<br>totalExpense(employees)<br>&#125;<br></code></pre></td></tr></table></figure><p>体验一下使用接口的美感吧！</p><h1 id="接口的内部表现"><a href="#接口的内部表现" class="headerlink" title="接口的内部表现"></a><strong>接口的内部表现</strong></h1><p>一个接口可以被认为是由一个元组（类型，值）在内部表示的。type是接口的基础具体类型，value是具体类型的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Test <span class="hljs-keyword">interface</span> &#123;<br>Tester()<br>&#125;<br><br><span class="hljs-keyword">type</span> MyFloat <span class="hljs-keyword">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m MyFloat)</span> <span class="hljs-title">Tester</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(t Test)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Interface 类型 %T ,  值： %v\n&quot;</span>, t, t)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> t Test<br>f := MyFloat(<span class="hljs-number">89.7</span>)<br>t = f<br>describe(t)<br>t.Tester()<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>Interface 类型 main.MyFloat ,  值： 89.7<br>89.7</p><h1 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a><strong>空接口</strong></h1><p>具有0个方法的接口称为空接口。它表示为interface {}。由于空接口有0个方法，所有类型都实现了空接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Type = %T, value = %v\n&quot;</span>, i, i)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>     <span class="hljs-comment">// 任何类型的变量传入都可以</span><br><br>s := <span class="hljs-string">&quot;Hello World&quot;</span><br>i := <span class="hljs-number">55</span><br>strt := <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>&#125;&#123;<br>name: <span class="hljs-string">&quot;Naveen R&quot;</span>,<br>&#125;<br>describe(s)<br>describe(i)<br>describe(strt)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a><strong>类型断言</strong></h1><p>类型断言用于提取接口的基础值，语法：<strong>i.(T)</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">assert</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span>&#123;<br>    s:= i.(<span class="hljs-keyword">int</span>)<br>    fmt.Println(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">var</span> s <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-number">55</span><br>  assert(s)<br>&#125;<br></code></pre></td></tr></table></figure><p>程序打印的是int值， 但是如果我们给s 变量赋值的是string类型，程序就会panic。</p><p>所以可以将以上程序改写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">assert</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    v, ok := i.(<span class="hljs-keyword">int</span>)<br>    fmt.Println(v, ok)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> s <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-number">56</span><br>    assert(s)<br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-string">&quot;Steven Paul&quot;</span><br>    assert(i)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 i 的值是int类型， 那么v就是i 对应的值， ok就是true。否则ok为false，程序并不会panic。</p><h1 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a><strong>类型判断</strong></h1><p>类型判断的语法类似于类型断言。在类型断言的语法i.（type）中，类型type应该由类型转换的<strong>关键字</strong>type替换。让我们看看它如何在下面的程序中起作用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findType</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    <span class="hljs-keyword">switch</span> i.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">string</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;String: %s\n&quot;</span>, i.(<span class="hljs-keyword">string</span>))<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">int</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;Int: %d\n&quot;</span>, i.(<span class="hljs-keyword">int</span>))<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;Unknown type\n&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    findType(<span class="hljs-string">&quot;Naveen&quot;</span>)<br>    findType(<span class="hljs-number">77</span>)<br>    findType(<span class="hljs-number">89.98</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以将类型与接口进行比较。如果我们有一个类型并且该类型实现了一个接口，那么可以将它与它实现的接口进行比较。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Describer <span class="hljs-keyword">interface</span> &#123;  <br>    Describe()<br>&#125;<br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;  <br>    name <span class="hljs-keyword">string</span><br>    age  <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span> <span class="hljs-title">Describe</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Printf(<span class="hljs-string">&quot;%s is %d years old&quot;</span>, p.name, p.age)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findType</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    <span class="hljs-keyword">switch</span> v := i.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> Describer:<br>        v.Describe()<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;unknown type\n&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    findType(<span class="hljs-string">&quot;Naveen&quot;</span>)<br>    p := Person&#123;<br>        name: <span class="hljs-string">&quot;Naveen R&quot;</span>,<br>        age:  <span class="hljs-number">25</span>,<br>    &#125;<br>    findType(p)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">unknown</span> <span class="hljs-keyword">type</span>  <br>Naveen R <span class="hljs-keyword">is</span> <span class="hljs-number">25</span> years <span class="hljs-built_in">old</span>  <br></code></pre></td></tr></table></figure><p>最后，留一个小问题，猜想一下，下面程序的输出结果：  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Describer <span class="hljs-keyword">interface</span> &#123;  <br>    Describe()<br>&#125;<br><span class="hljs-keyword">type</span> St <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s St)</span> <span class="hljs-title">Describe</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;被调用le!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findType</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    <span class="hljs-keyword">switch</span> v := i.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> Describer:<br>        v.Describe()<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">string</span>:<br>        fmt.Println(<span class="hljs-string">&quot;String 变量&quot;</span>)<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Printf(<span class="hljs-string">&quot;unknown type\n&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    findType(<span class="hljs-string">&quot;Naveen&quot;</span>)<br>    st := St(<span class="hljs-string">&quot;我的字符串&quot;</span>)<br>    findType(st)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>堆</tag>
      
      <tag>golang标准库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
